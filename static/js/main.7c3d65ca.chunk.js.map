{"version":3,"sources":["components/Footer.js","components/SearchBar.js","components/Header.js","components/Helpers.js","components/MainWeatherInfo.js","components/MiscWeatherInfo.js","components/Loading.js","components/ErrorMessage.js","components/APIFunctions.js","components/WeatherCard.js","App.js","serviceWorker.js","index.js"],"names":["Footer","className","target","rel","href","icon","faGithub","size","style","fontSize","color","SearchBar","setCity","useState","inputCity","setInputCity","onSubmit","e","preventDefault","type","id","placeholder","onChange","value","Header","pickFAIcon","parseInt","faBolt","faCloudShowersHeavy","faSnowflake","faSmog","faSun","faCloud","convertToCelcius","tempK","MainWeatherInfo","mainData","unit","console","log","city","country","Math","round","temp","feelsLike","tempMin","tempMax","weather","miscData","humidity","windSpeed","degree","windDeg","pressure","Loading","faSpinner","spin","ErrorMessage","errorMessage","faExclamationTriangle","GetWeatherData","query","url","data","setData","isLoading","setIsLoading","errorOcurred","setErrorOcurred","errorMsg","setErrorMsg","useEffect","a","fetch","mode","response","json","cod","Error","message","getData","FetchAPIData","setMainData","setMiscData","name","sys","main","description","feels_like","temp_min","temp_max","visibility","wind","deg","speed","WeatherCard","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.7c3d65ca.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\r\nimport \"../styling/Footer.css\";\r\n\r\nexport function Footer() {\r\n  return (\r\n    <div className=\"footer\">\r\n      <h1>Kyle Blackie Â©2020</h1>\r\n      <a\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n        href=\"https://github.com/KyleBlackie\"\r\n      >\r\n        <FontAwesomeIcon\r\n          icon={faGithub}\r\n          size=\"xs\"\r\n          style={{\r\n            fontSize: \"4vh\",\r\n            color: \"white\",\r\n          }}\r\n        />\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useState } from \"react\";\r\nimport \"../styling/SearchBar.css\";\r\n\r\nexport function SearchBar({ setCity }) {\r\n  const [inputCity, setInputCity] = useState(\"\");\r\n\r\n  return (\r\n    <form\r\n      className=\"searchInputs\"\r\n      onSubmit={(e) => {\r\n        // Update city info when user presses search button\r\n        e.preventDefault();\r\n        setCity(inputCity);\r\n      }}\r\n    >\r\n      <input\r\n        type=\"text\"\r\n        id=\"searchInput\"\r\n        placeholder=\"City Name...\"\r\n        onChange={(e) => setInputCity(e.target.value)}\r\n      ></input>\r\n      <button type=\"button\">Search</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport \"../styling/Header.css\";\r\n\r\nexport function Header({ setCity }) {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1>Your Weather Forecast</h1>\r\n      <SearchBar setCity={setCity} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","// Font-awesome Icon Imports\r\nimport { faCloud } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faCloudShowersHeavy } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faSnowflake } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faSun } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faBolt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faSmog } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n// takes in id given by API and returns a font-awesome icon\r\nexport const pickFAIcon = (id) => {\r\n  // return an icon depending on ID given\r\n  switch (parseInt(id / 100)) {\r\n    case 2:\r\n      return faBolt;\r\n    case 3:\r\n    case 5:\r\n      return faCloudShowersHeavy;\r\n    case 6:\r\n      return faSnowflake;\r\n    case 7:\r\n      return faSmog;\r\n    case 8:\r\n      return id === 800 ? faSun : faCloud;\r\n    default:\r\n      return faCloud;\r\n  }\r\n};\r\n\r\n// returns the current date\r\nexport const getDate = () => {\r\n  let [month, date, year] = new Date().toLocaleDateString().split(\"/\");\r\n\r\n  // return an object containing the month, date and year\r\n  return {\r\n    month,\r\n    date,\r\n    year,\r\n  };\r\n};\r\n\r\nexport const getMonthFromInt = (month) => {\r\n  month = parseInt(month);\r\n\r\n  switch (month) {\r\n    case 1:\r\n      return \"January\";\r\n    case 2:\r\n      return \"February\";\r\n    case 3:\r\n      return \"March\";\r\n    case 4:\r\n      return \"April\";\r\n    case 5:\r\n      return \"May\";\r\n    case 6:\r\n      return \"June\";\r\n    case 7:\r\n      return \"July\";\r\n    case 8:\r\n      return \"August\";\r\n    case 9:\r\n      return \"September\";\r\n    case 10:\r\n      return \"October\";\r\n    case 11:\r\n      return \"November\";\r\n    case 12:\r\n      return \"December\";\r\n    default:\r\n      return \"Error Month Not Available\";\r\n  }\r\n};\r\n\r\n// given a degree, outputs the direction in common terms i.e. N, NE, E, SE ...\r\nexport const getDirectionFromDegree = (degree) => {\r\n\r\n  // divide up 360 degrees into 8 parts... 45 degrees for each direction\r\n  if(degree >= 337.5 || degree < 22.5) {\r\n    return \"N\";\r\n  } else if(degree < 67.5) {\r\n    return \"NE\";\r\n  } else if(degree < 112.5) {\r\n    return \"E\";\r\n  } else if(degree < 157.5) {\r\n    return \"SE\";\r\n  } else if(degree < 202.5) {\r\n    return \"S\";\r\n  } else if(degree < 247.5) {\r\n    return \"SW\";\r\n  } else if(degree < 292.5) {\r\n    return \"W\";\r\n  } else if(degree < 337.5) {\r\n    return \"NW\";\r\n  } else {\r\n    return \"N/A\";\r\n  }\r\n};\r\n\r\n// CONVERSION HELPER FUNCTIONS --------------------\r\n\r\n// converts from kelvin to celcius\r\nexport const convertToCelcius = (tempK) => tempK - 273.15;\r\n\r\n// converts from kelvin to fahrenheit\r\nexport const convertToFahrenheit = (tempK) => tempK * (9 / 5) - 459.67;\r\n\r\n// converts from meter/sec to kilometres per hour\r\nexport const convertToKPH = (metresPerSec) => metresPerSec * 3.6;\r\n\r\n// converts from meter/sec to miles per hour\r\nexport const convertToMPH = (metresPerSec) => metresPerSec * 2.23694;\r\n","import React from \"react\";\r\nimport { convertToCelcius, pickFAIcon } from \"./Helpers\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nexport function MainWeatherInfo(mainData, unit) {\r\n  console.log(mainData);\r\n  return (\r\n    <div>\r\n      <h1>\r\n        {mainData.city}, {mainData.country}\r\n      </h1>\r\n      <h1 style={{fontSize: \"50px\"}}>{Math.round(convertToCelcius(mainData.temp) * 10) / 10}Â°</h1>\r\n      <h4>\r\n          Feels like{\" \"}\r\n          {Math.round(convertToCelcius(mainData.feelsLike) * 10) / 10}Â°\r\n          <br/>\r\n          {Math.round(convertToCelcius(mainData.tempMin))} /{\" \"}\r\n          {Math.round(convertToCelcius(mainData.tempMax))}\r\n      </h4>\r\n      <h1>{mainData.weather}</h1>\r\n      <FontAwesomeIcon\r\n        icon={pickFAIcon(mainData.id)}\r\n        size=\"lg\"\r\n        style={{ fontSize: \"15vh\" }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainWeatherInfo;\r\n","import React from \"react\";\r\nimport { getDirectionFromDegree, convertToKPH } from \"./Helpers\";\r\n\r\nimport \"../styling/MiscWeatherInfo.css\" \r\n\r\nexport function MainWeatherInfo(miscData, unit) {\r\n  return (\r\n    <div className=\"MiscWeatherInfo\"> \r\n      <h1>Humidity: {miscData.humidity}% </h1>\r\n      <h1>\r\n        Wind: {Math.round(convertToKPH(miscData.windSpeed) * 10) / 10}km/h{\" \"}\r\n        {getDirectionFromDegree(miscData.windDeg)}\r\n      </h1>\r\n      <h1>Pressure: {miscData.pressure}hPA</h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainWeatherInfo;\r\n","import React from \"react\";\r\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nexport function Loading() {\r\n  return (\r\n    <div>\r\n      <h1>Data is Loading...</h1>\r\n      <h3>Please Wait</h3>\r\n      <FontAwesomeIcon\r\n        icon={faSpinner}\r\n        size=\"lg\"\r\n        style={{ fontSize: \"10vw\" }}\r\n        spin\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loading;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faExclamationTriangle } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport function ErrorMessage({ errorMessage }) {\r\n  return (\r\n    <div>\r\n      <h1>An Error Ocurred</h1>\r\n      <h3>{errorMessage}</h3>\r\n      <FontAwesomeIcon\r\n        icon={faExclamationTriangle}\r\n        size=\"lg\"\r\n        style={{ fontSize: \"10vw\" }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ErrorMessage;\r\n","import { useState, useEffect } from \"react\";\r\n\r\n// uses fetch to request data from OpenWeatherAPI\r\nexport const FetchAPIData = (url) => {\r\n  const [data, setData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [errorOcurred, setErrorOcurred] = useState(false);\r\n  const [errorMsg, setErrorMsg] = useState(\"An error ocurred...\");\r\n\r\n  useEffect(() => {\r\n    // Check if url is empty\r\n    if (!url) return null;\r\n\r\n    const getData = async () => {\r\n      setIsLoading(true);\r\n      setErrorOcurred(false);\r\n      try {\r\n        //fetch data asynchronously\r\n        let response = await fetch(url, { mode: \"cors\" });\r\n        const data = await response.json();\r\n        // check for errors\r\n        if (data.cod !== 200) throw new Error(`${data.cod}: ${data.message}`);\r\n        setData(data);\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        setErrorOcurred(true);\r\n        setErrorMsg(error.message);\r\n        console.log(error);\r\n      }\r\n    };\r\n    getData();\r\n  }, [url, errorMsg]);\r\n\r\n  return {\r\n    data,\r\n    isLoading,\r\n    errorOcurred,\r\n    errorMsg,\r\n  };\r\n};\r\n\r\n// handles data returned from FetchAPIData\r\nexport const GetWeatherData = (query) => {\r\n  // Unfortunately, since this project is done without a backend there is no way to properly protect the api key\r\n  // If this were a full stack app I would've done this logic on the backend so that the api key would be safe\r\n  const API_KEY = \"9cbaa4d848fd26272a434bb68609eace\";\r\n  const url =\r\n    query &&\r\n    `https://api.openweathermap.org/data/2.5/weather?q=${query}&appid=${API_KEY}`;\r\n\r\n  // fetch data using constructed url\r\n  const { data, isLoading, errorOcurred, errorMsg } = FetchAPIData(url);\r\n  const [mainData, setMainData] = useState(data);\r\n  const [miscData, setMiscData] = useState(data);\r\n\r\n  useEffect(() => {\r\n    if (data !== null) {\r\n      // grab needed data ...\r\n      setMainData({\r\n        city: data.name,\r\n        country: data.sys.country,\r\n        weather: data.weather[0].main,\r\n        description: data.weather[0].description,\r\n        id: data.weather[0].id,\r\n        temp: data.main.temp,\r\n        feelsLike: data.main.feels_like,\r\n        tempMin: data.main.temp_min,\r\n        tempMax: data.main.temp_max,\r\n      });\r\n\r\n      setMiscData({\r\n        humidity: data.main.humidity,\r\n        pressure: data.main.pressure,\r\n        visibility: data.visibility,\r\n        windDeg: data.wind.deg,\r\n        windSpeed: data.wind.speed,\r\n      });\r\n    }\r\n  }, [data]);\r\n\r\n  return { mainData, miscData, isLoading, errorOcurred, errorMsg };\r\n};\r\n","import React, { useState } from \"react\";\r\nimport Header from \"./Header\";\r\nimport MainWeatherInfo from \"./MainWeatherInfo\";\r\nimport MiscWeatherInfo from \"./MiscWeatherInfo\";\r\nimport RetrievalDate from \"./RetrievalDate\";\r\nimport Loading from \"./Loading\";\r\nimport ErrorMessage from \"./ErrorMessage\";\r\nimport { GetWeatherData } from \"./APIFunctions\";\r\n\r\n//import \"../styling/WeatherCard.css\";\r\n\r\nexport function WeatherCard() {\r\n  // Set state for the selected city name and units being used\r\n  const [city, setCity] = useState(\"Toronto\");\r\n  const [unit, setUnit] = useState(\"m\");\r\n\r\n  // Fetch data for selected city\r\n  const {\r\n    mainData,\r\n    miscData,\r\n    isLoading,\r\n    errorOcurred,\r\n    errorMsg,\r\n  } = GetWeatherData(city);\r\n\r\n  return (\r\n    <div>\r\n      <Header setCity={setCity} />\r\n      {errorOcurred ? (\r\n        <ErrorMessage errorMessage={errorMsg} />\r\n      ) : isLoading ? (\r\n        <Loading />\r\n      ) : (\r\n        <div>\r\n          <MainWeatherInfo {...mainData} />\r\n          <MiscWeatherInfo {...miscData} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherCard;\r\n","import React from \"react\";\nimport Footer from \"./components/Footer\";\nimport WeatherCard from \"./components/WeatherCard\";\nimport \"./styling/App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <WeatherCard />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}