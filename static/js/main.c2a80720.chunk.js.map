{"version":3,"sources":["components/Footer.js","components/SearchBar.js","components/Header.js","components/Helpers.js","components/MainWeatherInfo.js","components/MiscWeatherInfo.js","components/Loading.js","components/ErrorMessage.js","components/APIFunctions.js","components/WeatherCard.js","App.js","serviceWorker.js","index.js"],"names":["Footer","className","target","rel","href","icon","faGithub","size","style","fontSize","color","SearchBar","setCity","useState","inputCity","setInputCity","onSubmit","e","preventDefault","type","id","placeholder","onChange","value","Header","pickFAIcon","parseInt","faBolt","faCloudShowersHeavy","faSnowflake","faSmog","faSun","faCloud","storageAvailable","storage","window","x","setItem","removeItem","DOMException","code","name","length","convertToCelcius","tempK","convertToFahrenheit","MainWeatherInfo","props","useMetric","unit","mainData","city","country","Math","round","temp","setUnit","localStorage","defaultChecked","htmlFor","feelsLike","tempMin","tempMax","weather","margin","miscData","humidity","windSpeed","metresPerSec","convertToMPH","degree","windDeg","Loading","faSpinner","spin","ErrorMessage","errorMessage","faExclamationTriangle","GetWeatherData","query","url","data","setData","isLoading","setIsLoading","errorOcurred","setErrorOcurred","errorMsg","setErrorMsg","useEffect","a","fetch","mode","response","json","cod","Error","message","console","log","getData","FetchAPIData","setMainData","setMiscData","sys","main","description","feels_like","temp_min","temp_max","pressure","visibility","wind","deg","speed","WeatherCard","search","getItem","checkStorage","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.c2a80720.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faGithub } from \"@fortawesome/free-brands-svg-icons\";\r\nimport \"../styling/Footer.css\";\r\n\r\nexport function Footer() {\r\n  return (\r\n    <div className=\"footer\">\r\n      <h1>Kyle Blackie Â©2020</h1>\r\n      <a\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n        href=\"https://github.com/KyleBlackie\"\r\n      >\r\n        <FontAwesomeIcon\r\n          icon={faGithub}\r\n          size=\"xs\"\r\n          style={{\r\n            fontSize: \"4vh\",\r\n            color: \"white\",\r\n          }}\r\n        />\r\n      </a>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useState } from \"react\";\r\nimport \"../styling/SearchBar.css\";\r\n\r\nexport function SearchBar({ setCity }) {\r\n  const [inputCity, setInputCity] = useState(\"\");\r\n\r\n  return (\r\n    <form\r\n      className=\"searchInputs\"\r\n      onSubmit={(e) => {\r\n        // Update city info when user presses search button\r\n        e.preventDefault();\r\n        setCity(inputCity);\r\n      }}\r\n    >\r\n      <input\r\n        type=\"text\"\r\n        id=\"searchInput\"\r\n        placeholder=\"City Name...\"\r\n        onChange={(e) => setInputCity(e.target.value)}\r\n      ></input>\r\n      <button type=\"submit\" >Search</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport \"../styling/Header.css\";\r\n\r\nexport function Header( { setCity }) {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1>Your Weather Forecast</h1>\r\n      <SearchBar setCity={setCity} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","// Font-awesome Icon Imports\r\nimport { faCloud } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faCloudShowersHeavy } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faSnowflake } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faSun } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faBolt } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faSmog } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n// takes in id given by API and returns a font-awesome icon\r\nexport const pickFAIcon = (id) => {\r\n  // return an icon depending on ID given\r\n  switch (parseInt(id / 100)) {\r\n    case 2:\r\n      return faBolt;\r\n    case 3:\r\n    case 5:\r\n      return faCloudShowersHeavy;\r\n    case 6:\r\n      return faSnowflake;\r\n    case 7:\r\n      return faSmog;\r\n    case 8:\r\n      return id === 800 ? faSun : faCloud;\r\n    default:\r\n      return faCloud;\r\n  }\r\n};\r\n\r\n// returns the current date\r\nexport const getDate = () => {\r\n  let [month, date, year] = new Date().toLocaleDateString().split(\"/\");\r\n\r\n  // return an object containing the month, date and year\r\n  return {\r\n    month,\r\n    date,\r\n    year,\r\n  };\r\n};\r\n\r\nexport const getMonthFromInt = (month) => {\r\n  month = parseInt(month);\r\n\r\n  switch (month) {\r\n    case 1:\r\n      return \"January\";\r\n    case 2:\r\n      return \"February\";\r\n    case 3:\r\n      return \"March\";\r\n    case 4:\r\n      return \"April\";\r\n    case 5:\r\n      return \"May\";\r\n    case 6:\r\n      return \"June\";\r\n    case 7:\r\n      return \"July\";\r\n    case 8:\r\n      return \"August\";\r\n    case 9:\r\n      return \"September\";\r\n    case 10:\r\n      return \"October\";\r\n    case 11:\r\n      return \"November\";\r\n    case 12:\r\n      return \"December\";\r\n    default:\r\n      return \"Error Month Not Available\";\r\n  }\r\n};\r\n\r\n// given a degree, outputs the direction in common terms i.e. N, NE, E, SE ...\r\nexport const getDirectionFromDegree = (degree) => {\r\n  // divide up 360 degrees into 8 parts... 45 degrees for each direction\r\n  if (degree >= 337.5 || degree < 22.5) {\r\n    return \"North\";\r\n  } else if (degree < 67.5) {\r\n    return \"North-East\";\r\n  } else if (degree < 112.5) {\r\n    return \"East\";\r\n  } else if (degree < 157.5) {\r\n    return \"South-East\";\r\n  } else if (degree < 202.5) {\r\n    return \"South\";\r\n  } else if (degree < 247.5) {\r\n    return \"South-West\";\r\n  } else if (degree < 292.5) {\r\n    return \"West\";\r\n  } else if (degree < 337.5) {\r\n    return \"North-West\";\r\n  } else {\r\n    return \"N/A\";\r\n  }\r\n};\r\n\r\n/* A Function that detects whether localStorage is both supported and available.\r\n * This function was provided by the Mozilla MDN web docs for the Web Storage API.\r\n * Reference: https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API/Using_the_Web_Storage_API\r\n */\r\nexport function storageAvailable(type) {\r\n  var storage;\r\n  try {\r\n    storage = window[type];\r\n    var x = \"__storage_test__\";\r\n    storage.setItem(x, x);\r\n    storage.removeItem(x);\r\n    return true;\r\n  } catch (e) {\r\n    return (\r\n      e instanceof DOMException &&\r\n      // everything except Firefox\r\n      (e.code === 22 ||\r\n        // Firefox\r\n        e.code === 1014 ||\r\n        // test name field too, because code might not be present\r\n        // everything except Firefox\r\n        e.name === \"QuotaExceededError\" ||\r\n        // Firefox\r\n        e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") &&\r\n      // acknowledge QuotaExceededError only if there's something already stored\r\n      storage &&\r\n      storage.length !== 0\r\n    );\r\n  }\r\n}\r\n\r\n// checks if there is any personalized search data and returns an object containing search settings\r\nexport const checkStorage = () => {\r\n  // if local storage is available for the browser then check if previous search data has been recorded\r\n  let search;\r\n  if (\r\n    storageAvailable(\"localStorage\") &&\r\n    localStorage.getItem(\"city\") &&\r\n    localStorage.getItem(\"unit\")\r\n  ) {\r\n    // use personalized search data\r\n    search = {\r\n      city: localStorage.getItem(\"city\"),\r\n      unit: localStorage.getItem(\"unit\"),\r\n    };\r\n  } else {\r\n    // use default search data\r\n    search = {\r\n      city: \"Toronto\",\r\n      unit: \"m\",\r\n    };\r\n\r\n    // set local storage values\r\n    localStorage.setItem(\"city\", \"Toronto\");\r\n    localStorage.setItem(\"unit\", \"m\");\r\n  }\r\n\r\n  return search;\r\n};\r\n\r\n// CONVERSION HELPER FUNCTIONS --------------------\r\n\r\n// converts from kelvin to celcius\r\nexport const convertToCelcius = (tempK) => tempK - 273.15;\r\n\r\n// converts from kelvin to fahrenheit\r\nexport const convertToFahrenheit = (tempK) => tempK * (9 / 5) - 459.67;\r\n\r\n// converts from meter/sec to kilometres per hour\r\nexport const convertToKPH = (metresPerSec) => metresPerSec * 3.6;\r\n\r\n// converts from meter/sec to miles per hour\r\nexport const convertToMPH = (metresPerSec) => metresPerSec * 2.23694;\r\n","import React from \"react\";\r\nimport { convertToCelcius, convertToFahrenheit, pickFAIcon } from \"./Helpers\";\r\nimport { storageAvailable } from \"./Helpers\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport \"../styling/MainWeatherInfo.css\";\r\n\r\nexport function MainWeatherInfo(props) {\r\n\r\n  let useMetric = props.unit === 'm';\r\n\r\n  return (\r\n    <div>\r\n      <h1 id=\"city-name\">\r\n        {props.mainData.city}, {props.mainData.country}\r\n      </h1>\r\n      <div id=\"main-temp-container\">\r\n        <h1 id=\"main-temp\">\r\n          {Math.round((useMetric ? convertToCelcius(props.mainData.temp) : convertToFahrenheit(props.mainData.temp)) * 10) / 10}\r\n        </h1>\r\n        <div className=\"switch-field\" onChange={(e) => {\r\n          props.setUnit(e.target.value);\r\n          if (storageAvailable(\"localStorage\"))  localStorage.setItem(\"unit\", e.target.value);\r\n        }}>\r\n          <input type=\"radio\" id=\"toggle-c\" name=\"toggle\" value=\"m\" defaultChecked={props.unit === \"m\"}></input>\r\n          <label htmlFor=\"toggle-c\">Â°C</label>\r\n          <span> | </span>\r\n          <input type=\"radio\" id=\"toggle-f\" name=\"toggle\" value=\"i\" defaultChecked={props.unit === \"i\"}></input>\r\n          <label htmlFor=\"toggle-f\">Â°F</label>\r\n        </div>\r\n      </div>\r\n      <h4>\r\n        Feels like {Math.round((useMetric ? convertToCelcius(props.mainData.feelsLike) : convertToFahrenheit(props.mainData.feelsLike))* 10) / 10}Â°\r\n        <br />\r\n        {Math.round(useMetric ? convertToCelcius(props.mainData.tempMin) : convertToFahrenheit(props.mainData.tempMin))} /{\" \"}\r\n        {Math.round(useMetric ? convertToCelcius(props.mainData.tempMax) : convertToFahrenheit(props.mainData.tempMax))}\r\n      </h4>\r\n      <h2 id=\"weather\">{props.mainData.weather}</h2>\r\n      <FontAwesomeIcon\r\n        icon={pickFAIcon(props.mainData.id)}\r\n        size=\"lg\"\r\n        style={{ fontSize: \"150px\" , margin: \"20px\"}}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainWeatherInfo;\r\n","import React from \"react\";\r\nimport { getDirectionFromDegree, convertToKPH, convertToMPH } from \"./Helpers\";\r\n\r\nimport \"../styling/MiscWeatherInfo.css\" \r\n\r\nexport function MainWeatherInfo(props) {\r\n  return (\r\n    <div className=\"MiscWeatherInfo\"> \r\n      <h1>Humidity: {props.miscData.humidity}% </h1>\r\n      <h1>\r\n  Wind: {Math.round((props.unit === 'm' ? convertToKPH(props.miscData.windSpeed) : convertToMPH(props.miscData.windSpeed)) * 10) / 10}{props.unit === 'm' ? `km/h`: `mi/h`}{\" \"}\r\n        {getDirectionFromDegree(props.miscData.windDeg)}\r\n      </h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MainWeatherInfo;\r\n","import React from \"react\";\r\nimport { faSpinner } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nexport function Loading() {\r\n  return (\r\n    <div>\r\n      <h1>Data is Loading...</h1>\r\n      <h3>Please Wait</h3>\r\n      <FontAwesomeIcon\r\n        icon={faSpinner}\r\n        size=\"lg\"\r\n        style={{ fontSize: \"10vw\" }}\r\n        spin\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loading;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faExclamationTriangle } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport function ErrorMessage({ errorMessage }) {\r\n  return (\r\n    <div>\r\n      <h1>An Error Ocurred</h1>\r\n      <h3>{errorMessage}</h3>\r\n      <FontAwesomeIcon\r\n        icon={faExclamationTriangle}\r\n        size=\"lg\"\r\n        style={{ fontSize: \"10vw\" }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ErrorMessage;\r\n","import { useState, useEffect } from \"react\";\r\nimport { storageAvailable } from \"./Helpers\";\r\n\r\n// uses fetch to request data from OpenWeatherAPI\r\nexport const FetchAPIData = (url) => {\r\n  const [data, setData] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [errorOcurred, setErrorOcurred] = useState(false);\r\n  const [errorMsg, setErrorMsg] = useState(\"An error ocurred...\");\r\n\r\n  useEffect(() => {\r\n    // Check if url is empty\r\n    if (!url) return null;\r\n\r\n    const getData = async () => {\r\n      setIsLoading(true);\r\n      setErrorOcurred(false);\r\n      try {\r\n        //fetch data asynchronously\r\n        let response = await fetch(url, { mode: \"cors\" });\r\n        const data = await response.json();\r\n        // check for errors\r\n        if (data.cod !== 200) throw new Error(`${data.cod}: ${data.message}`);\r\n        setData(data);\r\n        setIsLoading(false);\r\n      } catch (error) {\r\n        setErrorOcurred(true);\r\n        setErrorMsg(error.message);\r\n        console.log(error);\r\n      }\r\n    };\r\n    getData();\r\n  }, [url, errorMsg]);\r\n\r\n  return {\r\n    data,\r\n    isLoading,\r\n    errorOcurred,\r\n    errorMsg,\r\n  };\r\n};\r\n\r\n// handles data returned from FetchAPIData\r\nexport const GetWeatherData = (query) => {\r\n  // Unfortunately, since this project is done without a backend there is no way to properly protect the api key\r\n  // If this were a full stack app I would've done this logic on the backend so that the api key would be safe\r\n  const API_KEY = \"9cbaa4d848fd26272a434bb68609eace\";\r\n  const url =\r\n    query &&\r\n    `https://api.openweathermap.org/data/2.5/weather?q=${query}&appid=${API_KEY}`;\r\n\r\n  // fetch data using constructed url\r\n  const { data, isLoading, errorOcurred, errorMsg } = FetchAPIData(url);\r\n  const [mainData, setMainData] = useState(data);\r\n  const [miscData, setMiscData] = useState(data);\r\n\r\n  useEffect(() => {\r\n    if (data !== null) {\r\n      // grab needed data ...\r\n      setMainData({\r\n        city: data.name,\r\n        country: data.sys.country,\r\n        weather: data.weather[0].main,\r\n        description: data.weather[0].description,\r\n        id: data.weather[0].id,\r\n        temp: data.main.temp,\r\n        feelsLike: data.main.feels_like,\r\n        tempMin: data.main.temp_min,\r\n        tempMax: data.main.temp_max,\r\n      });\r\n\r\n      setMiscData({\r\n        humidity: data.main.humidity,\r\n        pressure: data.main.pressure,\r\n        visibility: data.visibility,\r\n        windDeg: data.wind.deg,\r\n        windSpeed: data.wind.speed,\r\n      });\r\n\r\n      // update local storage\r\n      if (storageAvailable(\"localStorage\"))  localStorage.setItem(\"city\", data.name);\r\n    }\r\n  }, [data]);\r\n\r\n  return { mainData, miscData, isLoading, errorOcurred, errorMsg };\r\n};\r\n","import React, { useState } from \"react\";\r\nimport Header from \"./Header\";\r\nimport MainWeatherInfo from \"./MainWeatherInfo\";\r\nimport MiscWeatherInfo from \"./MiscWeatherInfo\";\r\nimport Loading from \"./Loading\";\r\nimport ErrorMessage from \"./ErrorMessage\";\r\nimport { checkStorage } from \"./Helpers\";\r\nimport { GetWeatherData } from \"./APIFunctions\";\r\n\r\n//import \"../styling/WeatherCard.css\";\r\n\r\nexport function WeatherCard() {\r\n  // if local storage is available for the browser then check if previous search data has been recorded\r\n  let search = checkStorage();\r\n\r\n  // Set state for the selected city name and units being used\r\n  const [city, setCity] = useState(search.city);\r\n  const [unit, setUnit] = useState(search.unit);\r\n\r\n  // Fetch data for selected city\r\n  const {\r\n    mainData,\r\n    miscData,\r\n    isLoading,\r\n    errorOcurred,\r\n    errorMsg,\r\n  } = GetWeatherData(city);\r\n\r\n  return (\r\n    <div>\r\n      <Header setCity={setCity} />\r\n      {errorOcurred ? (\r\n        <ErrorMessage errorMessage={errorMsg} />\r\n      ) : isLoading ? (\r\n        <Loading />\r\n      ) : (\r\n        <div>\r\n          <MainWeatherInfo mainData={mainData} unit={unit} setUnit={setUnit}/>\r\n          <MiscWeatherInfo miscData={miscData} unit={unit}/>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WeatherCard;\r\n","import React from \"react\";\r\nimport Footer from \"./components/Footer\";\r\nimport WeatherCard from \"./components/WeatherCard\";\r\nimport \"./styling/App.css\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <WeatherCard />\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}